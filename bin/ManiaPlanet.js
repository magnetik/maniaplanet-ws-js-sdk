// Generated by CoffeeScript 1.3.3
(function() {
  var $, Client, Dedicated, Foobar, HTTPClient, Manialinks, Players, Rankings, Zones, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Client = (function() {

    function Client(clientId) {
      this.clientId = clientId;
      this.tokenUrl = 'http://127.0.0.1/oauth2/index.php/authorize/?';
    }

    Client.prototype.login = function(scope, redirectUrl) {
      var data, url, win;
      data = $.param({
        response_type: 'token',
        client_id: this.clientId,
        redirect_uri: encodeURI(redirectUrl),
        scope: encodeURI(scope)
      });
      url = this.tokenUrl + data;
      win = window.open(url, "js-oauth", 'width=800, height=600');
      return true;
    };

    return Client;

  })();

  $ = jQuery;

  HTTPClient = (function() {

    function HTTPClient(username, password) {
      this.username = username;
      this.password = password;
      this.apiURL = 'https://ws.maniaplanet.com/';
      if (!(this.username != null) || !(this.password != null)) {
        throw new SyntaxError('Please specify an username and a password');
      }
    }

    HTTPClient.prototype.execute = function(method, ressource, callback) {
      var url;
      url = this.apiURL + ressource + '/';
      return $.ajax(url, {
        type: method,
        dataType: 'jsonp',
        jsonp: 'jsonp_callback',
        username: this.username,
        password: this.password,
        xhrFields: {
          withCredentials: true
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return callback(jqXHR(textStatus(errorThrown)));
        },
        success: function(data, textStatus, jqXHR) {
          return callback(data, textStatus, jqXHR);
        }
      });
    };

    return HTTPClient;

  })();

  Dedicated = (function(_super) {

    __extends(Dedicated, _super);

    function Dedicated() {
      return Dedicated.__super__.constructor.apply(this, arguments);
    }

    Dedicated.prototype.get = function(login, callback) {
      return this.execute('get', "dedicated/" + login, callback);
    };

    return Dedicated;

  })(HTTPClient);

  Manialinks = (function(_super) {

    __extends(Manialinks, _super);

    function Manialinks() {
      return Manialinks.__super__.constructor.apply(this, arguments);
    }

    Manialinks.prototype.get = function(code, callback) {
      return this.execute('get', "manialinks/" + code, callback);
    };

    return Manialinks;

  })(HTTPClient);

  Foobar = (function(_super) {

    __extends(Foobar, _super);

    function Foobar() {
      return Foobar.__super__.constructor.apply(this, arguments);
    }

    Foobar.prototype.get = function(callback) {
      return this.execute('get', "foobar/", callback);
    };

    return Foobar;

  })(HTTPClient);

  Players = (function(_super) {

    __extends(Players, _super);

    function Players() {
      return Players.__super__.constructor.apply(this, arguments);
    }

    Players.prototype.get = function(login, callback) {
      return this.execute('get', "players/" + login, callback);
    };

    return Players;

  })(HTTPClient);

  Rankings = (function(_super) {

    __extends(Rankings, _super);

    function Rankings() {
      return Rankings.__super__.constructor.apply(this, arguments);
    }

    Rankings.prototype.initRankings = function(environment, kind) {
      this.environment = environment;
      this.kind = kind;
    };

    Rankings.prototype.getPlayer = function(login, callback) {
      return this.execute('get', this.environment + "/rankings/" + this.kind + ("/player/" + login), callback);
    };

    Rankings.prototype.getWorld = function(offset, length, callback) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return this.execute('get', this.environment + "/rankings/" + this.kind + ("/zone/?offset=" + offset + "&amp;length=" + length), callback);
    };

    Rankings.prototype.getZone = function(path, offset, length, callback) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return this.execute('get', this.environment + "/rankings/" + this.kind + ("/zone/" + path + "/?offset=" + offset + "&amp;length=" + length), callback);
    };

    Rankings.prototype.getChallengeWorld = function(challengeuid, offset, length, callback) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (this.kind = 'solo') {
        return this.execute('get', this.environment + ("/rankings/solo/challenges/" + challengeuid + "/?offset=" + offset + "&amp;length=" + length), callback);
      }
    };

    Rankings.prototype.getChallengeZone = function(challengeuid, path, offset, length, callback) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (this.kind = 'solo') {
        return this.execute('get', this.environment + ("/rankings/solo/challenges/" + challengeuid + "/" + path + "/?offset=" + offset + "&amp;length=" + length), callback);
      }
    };

    return Rankings;

  })(HTTPClient);

  Zones = (function(_super) {

    __extends(Zones, _super);

    function Zones() {
      return Zones.__super__.constructor.apply(this, arguments);
    }

    Zones.prototype.get = function(id) {
      return execute('get', "zones/id/" + id);
    };

    Zones.prototype.getByPath = function(path) {
      return execute('get', "zones/path/" + path);
    };

    Zones.prototype.getAll = function(offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/all/?offset=" + offset + "&amp;length=" + length + "&samp;ort=" + sort + "&amp;order=" + order);
    };

    Zones.prototype.getChildren = function(id, offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/id/" + id + "/children/?offset=" + offset + "&amp;length=" + length + "&amp;sort=" + sort + "&amp;order=" + order);
    };

    Zones.prototype.getChildrenByPath = function(path, offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/path/" + path + "/children/?offset=" + offset + "&amp;length=" + length + "&amp;sort=" + sort + "&amp;order=" + order);
    };

    Zones.prototype.getId = function(path) {
      return execute('get', "zones/path/" + path + "/id");
    };

    return Zones;

  })(HTTPClient);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Players = Players;

  root.Manialinks = Manialinks;

  root.Dedicated = Dedicated;

  root.Zones = Zones;

  root.Rankings = Rankings;

  root.OAuth = OAuth;

}).call(this);
