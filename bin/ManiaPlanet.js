// Generated by CoffeeScript 1.3.3
(function() {
  var $, Client, Dedicated, HTTPClient, Manialinks, MultiplayerRankings, Players, SoloRankings, Zones, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Client = (function() {

    function Client() {}

    Client.baseUrl = 'https://ws.maniaplanet.com/';

    Client.tokenUrl = "" + Client.baseUrl + "/oauth2/token/";

    Client.authorizeUrl = "" + Client.baseUrl + "/oauth2/authorize/";

    Client.prototype.getAuthorizationURL = function() {};

    return Client;

  })();

  $ = jQuery;

  HTTPClient = (function() {

    function HTTPClient(username, password) {
      this.username = username;
      this.password = password;
      this.apiURL = 'https://ws.maniaplanet.com/';
      if (!(this.username != null) || !(this.password != null)) {
        throw new SyntaxError('Please specify an username and a password');
      }
    }

    HTTPClient.prototype.execute = function(method, ressource) {
      var url;
      url = this.apiURL + ressource + '/';
      return $.ajax(url, {
        type: method,
        dataType: 'jsonp',
        jsonp: 'jsonp_callback',
        username: this.username,
        password: this.password,
        xhrFields: {
          withCredentials: true
        },
        error: function(jqXHR, textStatus, errorThrown) {
          return $('body').append("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          return $('body').append("Successful AJAX call: " + data);
        }
      });
    };

    return HTTPClient;

  })();

  MultiplayerRankings = (function(_super) {

    __extends(MultiplayerRankings, _super);

    function MultiplayerRankings() {
      return MultiplayerRankings.__super__.constructor.apply(this, arguments);
    }

    MultiplayerRankings.prototype.getPlayer = function(login) {
      return execute('get', "canyon/rankings/multiplayer/player/" + login);
    };

    MultiplayerRankings.prototype.getWorld = function(offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/multiplayer/zone/?offset=" + offset + "&length=" + length);
    };

    MultiplayerRankings.prototype.getZone = function(path, offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/multiplayer/zone/" + path + "/?offset=" + offset + "&length=" + length);
    };

    return MultiplayerRankings;

  })(HTTPClient);

  SoloRankings = (function(_super) {

    __extends(SoloRankings, _super);

    function SoloRankings() {
      return SoloRankings.__super__.constructor.apply(this, arguments);
    }

    SoloRankings.prototype.getPlayer = function(login) {
      return execute('get', "canyon/rankings/solo/player/" + login);
    };

    SoloRankings.prototype.getWorld = function(offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/solo/zone/?offset=" + offset + "&length=" + length);
    };

    SoloRankings.prototype.getZone = function(path, offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/solo/zone/" + path + "/?offset=" + offset + "&length=" + length);
    };

    SoloRankings.prototype.getChallengeWorld = function(challengeuid, offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/solo/challenges/" + challengeuid + "/?offset=" + offset + "&length=" + length);
    };

    SoloRankings.prototype.getChallengeZone = function(challengeuid, path, offset, length) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      return execute('get', "canyon/rankings/solo/challenges/" + challengeuid + "/" + path + "/?offset=" + offset + "&length=" + length);
    };

    return SoloRankings;

  })(HTTPClient);

  Dedicated = (function(_super) {

    __extends(Dedicated, _super);

    function Dedicated() {
      return Dedicated.__super__.constructor.apply(this, arguments);
    }

    Dedicated.prototype.get = function(login) {
      return execute('get', "dedicated/" + login);
    };

    return Dedicated;

  })(HTTPClient);

  Manialinks = (function(_super) {

    __extends(Manialinks, _super);

    function Manialinks() {
      return Manialinks.__super__.constructor.apply(this, arguments);
    }

    Manialinks.prototype.get = function(code) {
      return execute('get', "manialinks/" + code);
    };

    return Manialinks;

  })(HTTPClient);

  Players = (function(_super) {

    __extends(Players, _super);

    function Players() {
      this.get = __bind(this.get, this);
      return Players.__super__.constructor.apply(this, arguments);
    }

    Players.prototype.get = function(login) {
      return this.execute('get', "players/" + login);
    };

    return Players;

  })(HTTPClient);

  Zones = (function(_super) {

    __extends(Zones, _super);

    function Zones() {
      return Zones.__super__.constructor.apply(this, arguments);
    }

    Zones.prototype.get = function(id) {
      return execute('get', "zones/id/" + id);
    };

    Zones.prototype.getByPath = function(path) {
      return execute('get', "zones/path/" + path);
    };

    Zones.prototype.getAll = function(offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/all/?offset=" + offset + "&length=" + length + "&sort=" + sort + "&order=" + order);
    };

    Zones.prototype.getChildren = function(id, offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/id/" + id + "/children/?offset=" + offset + "&length=" + length + "&sort=" + sort + "&order=" + order);
    };

    Zones.prototype.getChildrenByPath = function(path, offset, length, sort, order) {
      if (offset == null) {
        offset = 0;
      }
      if (length == null) {
        length = 10;
      }
      if (sort == null) {
        sort = '';
      }
      if (order == null) {
        order = '';
      }
      return execute('get', "zones/path/" + path + "/children/?offset=" + offset + "&length=" + length + "&sort=" + sort + "&order=" + order);
    };

    Zones.prototype.getId = function(path) {
      return execute('get', "zones/path/" + path + "/id");
    };

    return Zones;

  })(HTTPClient);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Players = Players;

  root.Manialinks = Manialinks;

  root.Dedicated = Dedicated;

  root.Zones = Zones;

  root.MultiplayerRankings = MultiplayerRankings;

  root.SoloRankings = SoloRankings;

}).call(this);
